contract DeFiChatbot =

  record asset = {
    name : string,
    balance : int,
    price : int
  }

  record state = {
    owner : address,
    chatbotAddress : address,
    assets : map(string, asset),
    borrowAllowance : map(address, int) 
  }

  stateful entrypoint init(ownerAddress : address, chatbotAddress : address) =
    { owner = ownerAddress,
      chatbotAddress = chatbotAddress,
      assets = {},
      borrowAllowance = {} }

  stateful entrypoint addAsset(name : string, initialBalance : int, price : int) =
    require(Call.caller == state.owner, "Only the owner can add assets")
    let newAsset = { name = name, balance = initialBalance, price = price }
    put(state{ assets[name] = newAsset })

  stateful entrypoint buyAsset(name : string, quantity : int) =
    let asset = Map.lookup(name, state.assets)
    switch(asset)
      None => abort("Asset not found")
      Some(actualAsset) =>
        let totalCost = actualAsset.price * quantity
        require(Call.value >= totalCost, "Insufficient funds to buy")
        put(state{ assets[name].balance = actualAsset.balance + quantity })
        Chain.spend(state.chatbotAddress, totalCost)
  
  stateful entrypoint sellAsset(name : string, quantity: int) =
    let asset = Map.lookup(name, state.assets)
    switch(asset)
      None => abort("Asset not found")
      Some(actualAsset) =>
        require(actualAsset.balance >= quantity, "Insufficient balance to sell")
        let totalIncome = actualAsset.price * quantity
        put(state{ assets[name].balance = actualAsset.balance - quantity })
        Chain.spend(Call.caller, totalIncome)
  
  stateful entrypoint enableBorrowing() =
    let updatedAllowance = state.borrowAllowance{ [Call.caller] = 1 }
    put(state{ borrowAllowance = updatedAllowance })
  
  stateful entrypoint borrowAsset(name : string, quantity: int) =
    let asset = Map.lookup(name, state.assets)
    switch(asset)
      None => abort("Asset not found")
      Some(actualAsset) =>
        require(state.borrowAllowance[Call.caller] == 1, "Borrowing not enabled for the caller")
        put(state{ assets[name].balance = actualAsset.balance + quantity })

  entrypoint getAssetBalance(name : string) : int =
    switch(Map.lookup(name, state.assets))
      None => abort("Asset not found")
      Some(asset) => asset.balance

  entrypoint getAssetPrice(name : string) : int =
    switch(Map.lookup(name, state.assets))
      None => abort("Asset not found")
      Some(asset) => asset.price
